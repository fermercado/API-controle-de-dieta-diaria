paths:
  /users:
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email already exists.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error

  /users/login:
    post:
      summary: Authenticates a user and returns a JWT token.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication, returns JWT token and user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad Request, invalid login details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized, incorrect email or password.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Incorrect email or password.
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error.

  /meals:
    post:
      summary: Create a new meal
      tags:
        - Meals
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMealRequest'
      responses:
        '201':
          description: Meal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'

components:
  schemas:
    CreateUserRequest:
      type: object
      properties:
        firstName:
          type: string
          example: Maria
        lastName:
          type: string
          example: Silva
        email:
          type: string
          format: email
          example: maria.silva@example.com
        password:
          type: string
          format: password
          example: Password123
      required:
        - firstName
        - lastName
        - email
        - password

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: maria.silva@example.com
        firstName:
          type: string
          example: Maria
        lastName:
          type: string
          example: Silva

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: Password123
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          type: object
          properties:
            firstName:
              type: string
              example: Jo√£o
            lastName:
              type: string
              example: Silva
            email:
              type: string
              format: email
              example: joao@example.com

    CreateMealRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 50
          description: Name of the meal (up to 50 characters).
        description:
          type: string
          maxLength: 100
          description: Description of the meal (up to 100 characters).
        dateTime:
          type: string
          format: date-time
          description: Date and time of the meal (ISO 8601 format).
        isDiet:
          type: boolean
          description: Indicates if the meal is part of a diet.
      required:
        - name
        - description
        - dateTime
        - isDiet

    BadRequestError:
      type: object
      properties:
        message:
          type: string
          example: Bad Request
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string        

  requestBodies:
    CreateMealRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateMealRequest'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
